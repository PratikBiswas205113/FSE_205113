import { Component, Directive, ViewChild, HostBinding, HostListener, Input, ElementRef, Renderer2, EventEmitter, Output, ContentChild, ChangeDetectorRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const LabelType = {
    /** Label above low pointer */
    Low: 0,
    /** Label above high pointer */
    High: 1,
    /** Label for minimum slider value */
    Floor: 2,
    /** Label for maximum slider value */
    Ceil: 3,
    /** Label below legend tick */
    TickValue: 4,
};
LabelType[LabelType.Low] = "Low";
LabelType[LabelType.High] = "High";
LabelType[LabelType.Floor] = "Floor";
LabelType[LabelType.Ceil] = "Ceil";
LabelType[LabelType.TickValue] = "TickValue";
/**
 * Custom step definition
 *
 * This can be used to specify custom values and legend values for slider ticks
 * @record
 */

/**
 * Slider options
 */
class Options {
    constructor() {
        /**
         * Minimum value for a slider.
         */
        this.floor = 0;
        /**
         * Maximum value for a slider (defaults to value model).
         */
        this.ceil = null;
        /**
         * Step between each value.
         */
        this.step = 1;
        /**
         * The precision to display values with. The toFixed() is used internally for this.
         */
        this.precision = 0;
        /**
         * The minimum range authorized on the slider. Applies to range slider only.
         */
        this.minRange = null;
        /**
         * The maximum range authorized on the slider. Applies to range slider only.
         */
        this.maxRange = null;
        /**
         * Set to true to have a push behavior. When the min handle goes above the max,
         * the max is moved as well (and vice-versa). The range between min and max is
         * defined by the step option (defaults to 1) and can also be override by
         * the minRange option. Applies to range slider only.
         */
        this.pushRange = false;
        /**
         * The minimum value authorized on the slider.
         */
        this.minLimit = null;
        /**
         * The maximum value authorized on the slider.
         */
        this.maxLimit = null;
        /**
         * Custom translate function. Use this if you want to translate values displayed
         * on the slider.
         */
        this.translate = null;
        /**
         * Custom function for combining overlapping labels in range slider.
         * It takes the min and max values (already translated with translate fuction)
         * and should return how these two values should be combined.
         * If not provided, the default function will join the two values with
         * ' - ' as separator.
         */
        this.combineLabels = null;
        /**
         * Use to display legend under ticks (thus, it needs to be used along with
         * showTicks or showTicksValues). The function will be called with each tick
         * value and returned content will be displayed under the tick as a legend.
         * If the returned value is null, then no legend is displayed under
         * the corresponding tick.You can also directly provide the legend values
         * in the stepsArray option.
         */
        this.getLegend = null;
        /**
         * If you want to display a slider with non linear/number steps.
         * Just pass an array with each slider value and that's it; the floor, ceil and step settings
         * of the slider will be computed automatically.
         * By default, the value model and valueHigh model values will be the value of the selected item
         * in the stepsArray.
         * They can also be bound to the index of the selected item by setting the bindIndexForStepsArray
         * option to true.
         */
        this.stepsArray = null;
        /**
         * Set to true to bind the index of the selected item to value model and valueHigh model.
         */
        this.bindIndexForStepsArray = false;
        /**
         * When set to true and using a range slider, the range can be dragged by the selection bar.
         * Applies to range slider only.
         */
        this.draggableRange = false;
        /**
         * Same as draggableRange but the slider range can't be changed.
         * Applies to range slider only.
         */
        this.draggableRangeOnly = false;
        /**
         * Set to true to always show the selection bar before the slider handle.
         */
        this.showSelectionBar = false;
        /**
         * Set to true to always show the selection bar after the slider handle.
         */
        this.showSelectionBarEnd = false;
        /**
         * Set a number to draw the selection bar between this value and the slider handle.
         */
        this.showSelectionBarFromValue = null;
        /**
         * Only for range slider. Set to true to visualize in different colour the areas
         * on the left/right (top/bottom for vertical range slider) of selection bar between the handles.
         */
        this.showOuterSelectionBars = false;
        /**
         * Set to true to hide pointer labels
         */
        this.hidePointerLabels = false;
        /**
         * Set to true to hide min / max labels
         */
        this.hideLimitLabels = false;
        /**
         * Set to false to disable the auto-hiding behavior of the limit labels.
         */
        this.autoHideLimitLabels = true;
        /**
         * Set to true to make the slider read-only.
         */
        this.readOnly = false;
        /**
         * Set to true to disable the slider.
         */
        this.disabled = false;
        /**
         * Number of milliseconds to wait between two updates of the slider.
         * Internally, a throttle function (See http://underscorejs.org/#throttle) is used when the model
         * or high values of the slider are changed from outside the slider. This is to prevent from
         * re-rendering the slider too many times in a row. interval is the timeout value used on the
         * throttle function.
         */
        this.interval = 350;
        /**
         * Set to true to display a tick for each step of the slider.
         */
        this.showTicks = false;
        /**
         * Set to true to display a tick and the step value for each step of the slider..
         */
        this.showTicksValues = false;
        /* The step between each tick to display. If not set, the step value is used.
            Only applies when Not used when ticksArray is specified. */
        this.tickStep = null;
        /* The step between displaying each tick step value. */
        this.tickValueStep = 1;
        /**
         * Use to display ticks at specific positions.
         * The array contains the index of the ticks that should be displayed.
         * For example, [0, 1, 5] will display a tick for the first, second and sixth values.
         */
        this.ticksArray = null;
        /**
         * Used to display a tooltip when a tick is hovered.
         * Set to a function that returns the tooltip content for a given value.
         */
        this.ticksTooltip = null;
        /**
         * Same as ticksTooltip but for ticks values.
         */
        this.ticksValuesTooltip = null;
        /**
         * Set to true to display the slider vertically.
         * The slider will take the full height of its parent.
         * Changing this value at runtime is not currently supported.
         */
        this.vertical = false;
        /**
         * Function that returns the current color of the selection bar.
         * If your color won't change, don't use this option but set it through CSS.
         * If the returned color depends on a model value (either value or valueHigh),
         * you should use the argument passed to the function.
         * Indeed, when the function is called, there is no certainty that the model
         * has already been updated.
         */
        this.getSelectionBarColor = null;
        /**
         * Function that returns the color of a tick. showTicks must be enabled.
         */
        this.getTickColor = null;
        /**
         * Function that returns the current color of a pointer.
         * If your color won't change, don't use this option but set it through CSS.
         * If the returned color depends on a model value (either value or valueHigh),
         * you should use the argument passed to the function.
         * Indeed, when the function is called, there is no certainty that the model has already been updated.
         * To handle range slider pointers independently, you should evaluate pointerType within the given
         * function where "min" stands for value model and "max" for valueHigh model values.
         */
        this.getPointerColor = null;
        /**
         * Handles are focusable (on click or with tab) and can be modified using the following keyboard controls:
         * Left/bottom arrows: -1
         * Right/top arrows: +1
         * Page-down: -10%
         * Page-up: +10%
         * Home: minimum value
         * End: maximum value
         */
        this.keyboardSupport = true;
        /**
         * If you display the slider in an element that uses transform: scale(0.5), set the scale value to 2
         * so that the slider is rendered properly and the events are handled correctly.
         */
        this.scale = 1;
        /**
         * Set to true to force the value to be rounded to the step, even when modified from the outside.
         * When set to false, if the model values are modified from outside the slider, they are not rounded
         * and can be between two steps.
         */
        this.enforceStep = true;
        /**
         * Set to true to round the value model and valueHigh model to the slider range even when modified
         * from outside the slider. When set to false, if the model values are modified from outside the slider,
         * they are not rounded but they are still rendered properly on the slider.
         */
        this.enforceRange = false;
        /**
         * Set to true to prevent to user from switching the min and max handles. Applies to range slider only.
         */
        this.noSwitching = false;
        /**
         * Set to true to only bind events on slider handles.
         */
        this.onlyBindHandles = false;
        /**
         * Set to true to show graphs right to left.
         * If vertical is true it will be from top to bottom and left / right arrow functions reversed.
         */
        this.rightToLeft = false;
        /**
         * Set to true to reverse keyboard navigation:
         * Right/top arrows: -1
         * Left/bottom arrows: +1
         * Page-up: -10%
         * Page-down: +10%
         * End: minimum value
         * Home: maximum value
         */
        this.reversedControls = false;
        /**
         * Set to true to keep the slider labels inside the slider bounds.
         */
        this.boundPointerLabels = true;
        /**
         * Set to true to use a logarithmic scale to display the slider.
         */
        this.logScale = false;
        /**
         * Function that returns the position on the slider for a given value.
         * The position must be a percentage between 0 and 1.
         */
        this.customValueToPosition = null;
        /**
         * Function that returns the value for a given position on the slider.
         * The position is a percentage between 0 and 1.
         */
        this.customPositionToValue = null;
        /**
         * Use to display the selection bar as a gradient.
         * The given object must contain from and to properties which are colors.
         */
        this.selectionBarGradient = null;
        /**
         * Use to add a label directly to the slider for accessibility. Adds the aria-label attribute.
         */
        this.ariaLabel = null;
        /**
         * Use instead of ariaLabel to reference the id of an element which will be used to label the slider.
         * Adds the aria-labelledby attribute.
         */
        this.ariaLabelledBy = null;
        /**
         * Use to add a label directly to the slider range for accessibility. Adds the aria-label attribute.
         */
        this.ariaLabelHigh = null;
        /**
         * Use instead of ariaLabelHigh to reference the id of an element which will be used to label the slider range.
         * Adds the aria-labelledby attribute.
         */
        this.ariaLabelledByHigh = null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const PointerType = {
    /** Low pointer */
    Min: 0,
    /** High pointer */
    Max: 1,
};
PointerType[PointerType.Min] = "Min";
PointerType[PointerType.Max] = "Max";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ChangeContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 *  Collection of functions to convert between value and slider position
 */
class ValuePositionConverter {
    /**
     * @param {?} val
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    static linearValueToPosition(val, minVal, maxVal) {
        const /** @type {?} */ range = maxVal - minVal;
        return (val - minVal) / range;
    }
    /**
     * @param {?} val
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    static logValueToPosition(val, minVal, maxVal) {
        val = Math.log(val);
        minVal = Math.log(minVal);
        maxVal = Math.log(maxVal);
        const /** @type {?} */ range = maxVal - minVal;
        return (val - minVal) / range;
    }
    /**
     * @param {?} percent
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    static linearPositionToValue(percent, minVal, maxVal) {
        return percent * (maxVal - minVal) + minVal;
    }
    /**
     * @param {?} percent
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    static logPositionToValue(percent, minVal, maxVal) {
        minVal = Math.log(minVal);
        maxVal = Math.log(maxVal);
        const /** @type {?} */ value = percent * (maxVal - minVal) + minVal;
        return Math.exp(value);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Wrapper to support legacy jqLite interface
 *
 * The aim is to slowly phase out the usage of this wrapper and replace
 * any manual DOM manipulations with Angular bindings
 */
class JqLiteWrapper {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        this.elemRef = elemRef;
        this.renderer = renderer;
        this.eventListeners = {};
    }
    /**
     * @param {?} clazz
     * @return {?}
     */
    addClass(clazz) {
        this.renderer.addClass(this.elemRef.nativeElement, clazz);
    }
    /**
     * @param {?} clazz
     * @return {?}
     */
    removeClass(clazz) {
        this.renderer.removeClass(this.elemRef.nativeElement, clazz);
    }
    /**
     * @param {?} clazz
     * @return {?}
     */
    hasClass(clazz) {
        return this.elemRef.nativeElement.classList.contains(clazz);
    }
    /**
     * @param {?} html
     * @return {?}
     */
    html(html) {
        this.elemRef.nativeElement.innerHTML = html;
    }
    /**
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    css(style, value) {
        if (value !== '') {
            this.renderer.setStyle(this.elemRef.nativeElement, style, value);
        }
        else {
            this.renderer.removeStyle(this.elemRef.nativeElement, style);
        }
    }
    /**
     * @param {?} attr
     * @param {?} value
     * @return {?}
     */
    attr(attr, value) {
        if (value !== null) {
            this.renderer.setAttribute(this.elemRef.nativeElement, attr, value);
        }
        else {
            this.renderer.removeAttribute(this.elemRef.nativeElement, attr);
        }
    }
    /**
     * @return {?}
     */
    getBoundingClientRect() {
        return this.elemRef.nativeElement.getBoundingClientRect();
    }
    /**
     * @return {?}
     */
    focus() {
        this.elemRef.nativeElement.focus();
    }
    /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    on(eventName, callback) {
        if (!this.eventListeners.hasOwnProperty(eventName)) {
            this.eventListeners[eventName] = /** @type {?} */ ([]);
        }
        const /** @type {?} */ unsubscribe = this.renderer.listen(this.elemRef.nativeElement, eventName, callback);
        this.eventListeners[eventName].push(unsubscribe);
    }
    /**
     * @param {?=} eventName
     * @return {?}
     */
    off(eventName) {
        if (eventName) {
            if (this.eventListeners.hasOwnProperty(eventName)) {
                for (const /** @type {?} */ unsubscribe of this.eventListeners[eventName]) {
                    unsubscribe();
                }
                delete this.eventListeners[eventName];
            }
        }
        else {
            for (const /** @type {?} */ eName of Object.keys(this.eventListeners)) {
                this.off(eName);
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Throttled function
 *
 * Throttled function encapsulates a function object and allows calls to it,
 * but it limits the call rate to not exceed a given wait time.
 *
 * If there are multiple calls to the function all within the wait time window,
 * they will result in a single function call, which will be executed after
 * the wait time expires.
 */
class ThrottledFunc {
    /**
     * Create a new throttled function
     *
     * @param {?} func function to call
     * @param {?} wait wait time in milliseconds
     */
    constructor(func, wait) {
        this.previous = 0;
        this.timeout = null;
        this.func = func;
        this.wait = wait;
    }
    /**
     * Call the function
     * @return {?}
     */
    call() {
        const /** @type {?} */ now = this.getTime();
        const /** @type {?} */ remaining = this.wait - (now - this.previous);
        if (remaining <= 0) {
            clearTimeout(this.timeout);
            this.timeout = null;
            this.previous = now;
            this.func();
        }
        else if (this.timeout === null) {
            this.timeout = setTimeout(() => this.callLater(), remaining);
        }
    }
    /**
     * @return {?}
     */
    getTime() {
        return Date.now();
    }
    /**
     * @return {?}
     */
    callLater() {
        this.previous = this.getTime();
        this.timeout = null;
        this.func();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Helper with compatibility functions to support different browsers
 */
class CompatibilityHelper {
    /**
     * Workaround for  TouchEvent constructor sadly not being available on all browsers (e.g. Firefox, Safari)
     * @param {?} event
     * @return {?}
     */
    static isTouchEvent(event) {
        if ((/** @type {?} */ (window)).TouchEvent !== undefined) {
            return event instanceof TouchEvent;
        }
        return event.touches !== undefined;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Tick {
}
class Dragging {
    constructor() {
        this.active = false;
        this.value = 0;
        this.difference = 0;
        this.position = 0;
        this.lowLimit = 0;
        this.highLimit = 0;
    }
}
/** @enum {number} */
const HandleType = {
    Low: 0,
    High: 1,
};
HandleType[HandleType.Low] = "Low";
HandleType[HandleType.High] = "High";
/** @enum {number} */
const HandleLabelType = {
    Min: 0,
    Max: 1,
};
HandleLabelType[HandleLabelType.Min] = "Min";
HandleLabelType[HandleLabelType.Max] = "Max";
class SliderElement extends JqLiteWrapper {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
        this.position = 0;
        this.alwaysHide = false;
    }
}
class RightOutSelDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
RightOutSelDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderRightOutSelElem]' },] },
];
/** @nocollapse */
RightOutSelDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class LeftOutSelDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
LeftOutSelDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderLeftOutSelElem]' },] },
];
/** @nocollapse */
LeftOutSelDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class FullBarDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
FullBarDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderFullBarElem]' },] },
];
/** @nocollapse */
FullBarDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class SelBarDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
SelBarDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderSelBarElem]' },] },
];
/** @nocollapse */
SelBarDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class MinHDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
MinHDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderMinHElem]' },] },
];
/** @nocollapse */
MinHDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class MaxHDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
MaxHDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderMaxHElem]' },] },
];
/** @nocollapse */
MaxHDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class FlrLabDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
FlrLabDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderFlrLabElem]' },] },
];
/** @nocollapse */
FlrLabDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class CeilLabDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
CeilLabDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderCeilLabElem]' },] },
];
/** @nocollapse */
CeilLabDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class MinLabDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
MinLabDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderMinLabElem]' },] },
];
/** @nocollapse */
MinLabDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class MaxLabDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
MaxLabDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderMaxLabElem]' },] },
];
/** @nocollapse */
MaxLabDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class CmbLabDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
CmbLabDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderCmbLabElem]' },] },
];
/** @nocollapse */
CmbLabDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class TicksDirective extends SliderElement {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
    }
}
TicksDirective.decorators = [
    { type: Directive, args: [{ selector: '[ng5SliderTicksElem]' },] },
];
/** @nocollapse */
TicksDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
class SliderComponent {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} changeDetectionRef
     */
    constructor(renderer, elementRef, changeDetectionRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.changeDetectionRef = changeDetectionRef;
        // Output for low value slider to support two-way bindings
        this.valueChange = new EventEmitter();
        // Output for high value slider to support two-way bindings
        this.highValueChange = new EventEmitter();
        // Event emitted when user starts interaction with the slider
        this.userChangeStart = new EventEmitter();
        // Event emitted on each change coming from user interaction
        this.userChange = new EventEmitter();
        // Event emitted when user finishes interaction with the slider
        this.userChangeEnd = new EventEmitter();
        this._options = new Options();
        this.viewOptions = new Options();
        this.barStyle = {};
        this.minPointerStyle = {};
        this.maxPointerStyle = {};
        this.showTicks = false;
        this.ticks = [];
        this.sliderElementVerticalClass = false;
        this.sliderElementDisabledAttr = null;
        /**
         * Viewport position of the slider element (the host element)
         */
        this.sliderElementPosition = 0;
        this.dragging = new Dragging();
        this.handleHalfDim = 0;
        this.maxPos = 0;
        this.precision = 0;
        this.step = 1;
        this.tracking = null;
        this.minValue = 0;
        this.maxValue = 0;
        this.valueRange = 0;
        this.intermediateTicks = false;
        this.initHasRun = false;
        this.firstKeyDown = false;
        this.internalChange = false;
        this.cmbLabelShown = false;
        this.currentFocusElement = null;
        this.onMoveUnsubscribe = null;
        this.onEndUnsubscribe = null;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set value(newValue) {
        const /** @type {?} */ oldValue = this._value;
        this._value = newValue;
        this.onChangeValue(oldValue, newValue);
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} newHighValue
     * @return {?}
     */
    set highValue(newHighValue) {
        const /** @type {?} */ oldHighValue = this._highValue;
        this._highValue = newHighValue;
        this.onChangeHighValue(oldHighValue, newHighValue);
    }
    /**
     * @return {?}
     */
    get highValue() {
        return this._highValue;
    }
    /**
     * @param {?} newOptions
     * @return {?}
     */
    set options(newOptions) {
        const /** @type {?} */ oldOptions = this._options;
        this._options = newOptions;
        this.onChangeOptions(oldOptions, newOptions);
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} manualRefresh
     * @return {?}
     */
    set manualRefresh(manualRefresh) {
        this.unsubscribeManualRefresh();
        this.manualRefreshSubscription = manualRefresh.subscribe(() => {
            setTimeout(() => this.calcViewDimensions());
        });
    }
    /**
     * @return {?}
     */
    get range() {
        return this.value !== undefined && this.highValue !== undefined;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewOptions = new Options();
        Object.assign(this.viewOptions, this.options);
        // We need to run these two things first, before the rest of the init in ngAfterViewInit(),
        // because these two settings are set through @HostBinding and Angular change detection
        // mechanism doesn't like them changing in ngAfterViewInit()
        this.setDisabledState();
        this.setVerticalClass();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.thrOnLowHandleChange = new ThrottledFunc(() => { this.onLowHandleChange(); }, this.viewOptions.interval);
        this.thrOnHighHandleChange = new ThrottledFunc(() => { this.onHighHandleChange(); }, this.viewOptions.interval);
        this.applyOptions();
        this.syncLowValue();
        if (this.range) {
            this.syncHighValue();
        }
        this.manageElementsStyle();
        this.setDisabledState();
        this.calcViewDimensions();
        this.setMinAndMax();
        this.addAccessibility();
        this.updateCeilLab();
        this.updateFloorLab();
        this.initHandles();
        this.manageEventsBindings();
        this.initHasRun = true;
        // Run change detection manually to resolve some issues when init procedure changes values used in the view
        this.changeDetectionRef.detectChanges();
    }
    /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    onChangeOptions(oldValue, newValue) {
        if (!this.initHasRun || newValue === oldValue) {
            return;
        }
        this.applyOptions(); // need to be called before synchronizing the values
        this.syncLowValue();
        if (this.range) {
            this.syncHighValue();
        }
        this.resetSlider();
    }
    /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    onChangeValue(oldValue, newValue) {
        if (!this.initHasRun || this.internalChange || newValue === oldValue) {
            return;
        }
        this.thrOnLowHandleChange.call();
    }
    /**
     * @param {?} oldValue
     * @param {?} newValue
     * @return {?}
     */
    onChangeHighValue(oldValue, newValue) {
        if (!this.initHasRun || this.internalChange || newValue === oldValue) {
            return;
        }
        if (newValue != null) {
            this.thrOnHighHandleChange.call();
        }
        if ((this.range && newValue == null) ||
            (!this.range && newValue != null)) {
            this.applyOptions();
            this.resetSlider();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.calcViewDimensions();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribeManualRefresh();
        this.unbindEvents();
        this.currentFocusElement = null;
    }
    /**
     * @return {?}
     */
    unsubscribeManualRefresh() {
        if (this.manualRefreshSubscription) {
            this.manualRefreshSubscription.unsubscribe();
            this.manualRefreshSubscription = null;
        }
    }
    /**
     * @return {?}
     */
    getCurrentTrackingValue() {
        if (this.tracking === null) {
            return null;
        }
        return this.tracking === HandleType.Low ? this.viewLowValue : this.viewHighValue;
    }
    /**
     * @param {?} modelValue
     * @return {?}
     */
    findStepIndex(modelValue) {
        let /** @type {?} */ index = 0;
        for (let /** @type {?} */ i = 0; i < this.viewOptions.stepsArray.length; i++) {
            const /** @type {?} */ step = this.viewOptions.stepsArray[i];
            if (step.value === modelValue) {
                index = i;
                break;
            }
        }
        return index;
    }
    /**
     * @return {?}
     */
    syncLowValue() {
        if (this.viewOptions.stepsArray) {
            if (!this.viewOptions.bindIndexForStepsArray) {
                this.viewLowValue = this.findStepIndex(this.value);
            }
            else {
                this.viewLowValue = this.value;
            }
        }
        else {
            this.viewLowValue = this.value;
        }
    }
    /**
     * @return {?}
     */
    syncHighValue() {
        if (this.viewOptions.stepsArray) {
            if (!this.viewOptions.bindIndexForStepsArray) {
                this.viewHighValue = this.findStepIndex(this.highValue);
            }
            else {
                this.viewHighValue = this.highValue;
            }
        }
        else {
            this.viewHighValue = this.highValue;
        }
    }
    /**
     * @param {?} sliderValue
     * @return {?}
     */
    getStepValue(sliderValue) {
        const /** @type {?} */ step = this.viewOptions.stepsArray[sliderValue];
        return step.value;
    }
    /**
     * @return {?}
     */
    applyLowValue() {
        this.internalChange = true;
        if (this.viewOptions.stepsArray) {
            if (!this.viewOptions.bindIndexForStepsArray) {
                this.value = this.getStepValue(this.viewLowValue);
            }
            else {
                this.value = this.viewLowValue;
            }
        }
        else {
            this.value = this.viewLowValue;
        }
        this.internalChange = false;
    }
    /**
     * @return {?}
     */
    applyHighValue() {
        this.internalChange = true;
        if (this.viewOptions.stepsArray) {
            if (!this.viewOptions.bindIndexForStepsArray) {
                this.highValue = this.getStepValue(this.viewHighValue);
            }
            else {
                this.highValue = this.viewHighValue;
            }
        }
        else {
            this.highValue = this.viewHighValue;
        }
        this.internalChange = false;
    }
    /**
     * @return {?}
     */
    onLowHandleChange() {
        this.syncLowValue();
        if (this.range) {
            this.syncHighValue();
        }
        this.setMinAndMax();
        this.updateLowHandle(this.valueToPosition(this.viewLowValue));
        this.updateSelectionBar();
        this.updateTicksScale();
        this.updateAriaAttributes();
        if (this.range) {
            this.updateCmbLabel();
        }
    }
    /**
     * @return {?}
     */
    onHighHandleChange() {
        this.syncLowValue();
        this.syncHighValue();
        this.setMinAndMax();
        this.updateHighHandle(this.valueToPosition(this.viewHighValue));
        this.updateSelectionBar();
        this.updateTicksScale();
        this.updateCmbLabel();
        this.updateAriaAttributes();
    }
    /**
     * @return {?}
     */
    applyOptions() {
        this.viewOptions = new Options();
        Object.assign(this.viewOptions, this.options);
        if (this.viewOptions.step <= 0) {
            this.viewOptions.step = 1;
        }
        this.viewOptions.draggableRange = this.range && this.viewOptions.draggableRange;
        this.viewOptions.draggableRangeOnly = this.range && this.viewOptions.draggableRangeOnly;
        if (this.viewOptions.draggableRangeOnly) {
            this.viewOptions.draggableRange = true;
        }
        this.viewOptions.showTicks = this.viewOptions.showTicks ||
            this.viewOptions.showTicksValues ||
            !!this.viewOptions.ticksArray;
        if (this.viewOptions.showTicks && (this.viewOptions.tickStep !== null || this.viewOptions.ticksArray)) {
            this.intermediateTicks = true;
        }
        this.showTicks = this.viewOptions.showTicks;
        this.viewOptions.showSelectionBar = this.viewOptions.showSelectionBar ||
            this.viewOptions.showSelectionBarEnd ||
            this.viewOptions.showSelectionBarFromValue !== null;
        if (this.viewOptions.stepsArray) {
            this.parseStepsArray();
        }
        else {
            if (this.viewOptions.translate) {
                this.translate = this.viewOptions.translate;
            }
            else {
                this.translate = (value) => String(value);
            }
            this.getLegend = this.viewOptions.getLegend;
        }
        if (this.viewOptions.combineLabels) {
            this.combineLabels = this.viewOptions.combineLabels;
        }
        else {
            this.combineLabels = (minValue, maxValue) => {
                return minValue + ' - ' + maxValue;
            };
        }
    }
    /**
     * @return {?}
     */
    parseStepsArray() {
        this.viewOptions.floor = 0;
        this.viewOptions.ceil = this.viewOptions.stepsArray.length - 1;
        this.viewOptions.step = 1;
        if (this.viewOptions.translate) {
            this.translate = this.viewOptions.translate;
        }
        else {
            this.translate = (modelValue) => {
                if (this.viewOptions.bindIndexForStepsArray) {
                    return String(this.getStepValue(modelValue));
                }
                return String(modelValue);
            };
        }
        this.getLegend = (index) => {
            const /** @type {?} */ step = this.viewOptions.stepsArray[index];
            return step.legend;
        };
    }
    /**
     * @return {?}
     */
    resetSlider() {
        this.manageElementsStyle();
        this.addAccessibility();
        this.setMinAndMax();
        this.updateCeilLab();
        this.updateFloorLab();
        this.unbindEvents();
        this.manageEventsBindings();
        this.setDisabledState();
        this.calcViewDimensions();
        this.refocusPointerIfNeeded();
    }
    /**
     * @return {?}
     */
    refocusPointerIfNeeded() {
        if (this.currentFocusElement) {
            this.onPointerFocus(this.currentFocusElement.pointer, this.currentFocusElement.ref);
            this.focusElement(this.currentFocusElement.pointer);
        }
    }
    /**
     * @return {?}
     */
    manageElementsStyle() {
        if (!this.range) {
            this.maxHElem.css('display', 'none');
        }
        else {
            this.maxHElem.css('display', '');
        }
        this.alwaysHide(this.flrLabElem, this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);
        this.alwaysHide(this.ceilLabElem, this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);
        const /** @type {?} */ hideLabelsForTicks = this.viewOptions.showTicksValues && !this.intermediateTicks;
        this.alwaysHide(this.minLabElem, hideLabelsForTicks || this.viewOptions.hidePointerLabels);
        this.alwaysHide(this.maxLabElem, hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);
        this.alwaysHide(this.cmbLabElem, hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);
        this.alwaysHide(this.selBarElem, !this.range && !this.viewOptions.showSelectionBar);
        this.alwaysHide(this.leftOutSelBar, !this.range || !this.viewOptions.showOuterSelectionBars);
        this.alwaysHide(this.rightOutSelBar, !this.range || !this.viewOptions.showOuterSelectionBars);
        if (this.range && this.viewOptions.showOuterSelectionBars) {
            this.fullBarElem.addClass('ng5-slider-transparent');
        }
        if (this.sliderElementVerticalClass !== this.viewOptions.vertical) {
            this.setVerticalClass();
            // The above change in host component class will not be applied until the end of this cycle
            // However, functions calculating the slider position expect the slider to be already styled as vertical
            // So as a workaround, we need to reset the slider once again to compute the correct values
            setTimeout(() => { this.resetSlider(); });
        }
        if (this.viewOptions.draggableRange) {
            this.selBarElem.addClass('ng5-slider-draggable');
        }
        else {
            this.selBarElem.removeClass('ng5-slider-draggable');
        }
        if (this.intermediateTicks && this.options.showTicksValues) {
            this.ticksElem.addClass('ng5-slider-ticks-values-under');
        }
    }
    /**
     * @param {?} el
     * @param {?} hide
     * @return {?}
     */
    alwaysHide(el, hide) {
        el.alwaysHide = hide;
        if (hide) {
            this.hideEl(el);
        }
        else {
            this.showEl(el);
        }
    }
    /**
     * @return {?}
     */
    manageEventsBindings() {
        if (this.viewOptions.disabled || this.viewOptions.readOnly) {
            this.unbindEvents();
        }
        else {
            this.bindEvents();
        }
    }
    /**
     * @return {?}
     */
    setDisabledState() {
        this.sliderElementDisabledAttr = this.viewOptions.disabled ? 'disabled' : null;
    }
    /**
     * @return {?}
     */
    setVerticalClass() {
        this.sliderElementVerticalClass = this.viewOptions.vertical;
    }
    /**
     * @return {?}
     */
    resetLabelsValue() {
        this.minLabElem.value = undefined;
        this.maxLabElem.value = undefined;
    }
    /**
     * @return {?}
     */
    initHandles() {
        this.updateLowHandle(this.valueToPosition(this.viewLowValue));
        /*
           the order here is important since the selection bar should be
           updated after the high handle but before the combined label
           */
        if (this.range) {
            this.updateHighHandle(this.valueToPosition(this.viewHighValue));
        }
        this.updateSelectionBar();
        if (this.range) {
            this.updateCmbLabel();
        }
        this.updateTicksScale();
    }
    /**
     * @param {?} value
     * @param {?} label
     * @return {?}
     */
    setLabelValue(value, label) {
        let /** @type {?} */ recalculateDimension = false;
        const /** @type {?} */ noLabelInjection = label.hasClass('no-label-injection');
        if (label.value === undefined ||
            label.value.length !== value.length ||
            (label.value.length > 0 && label.dimension === 0)) {
            recalculateDimension = true;
            label.value = value;
        }
        if (!noLabelInjection) {
            label.html(value);
        }
        // Update width only when length of the label have changed
        if (recalculateDimension) {
            this.calculateElementDimension(label);
        }
    }
    /**
     * @return {?}
     */
    setMinAndMax() {
        this.step = +this.viewOptions.step;
        this.precision = +this.viewOptions.precision;
        this.minValue = this.viewOptions.floor;
        if (this.viewOptions.logScale && this.minValue === 0) {
            throw Error('Can\'t use floor=0 with logarithmic scale');
        }
        if (this.viewOptions.enforceStep) {
            this.viewLowValue = this.roundStep(this.viewLowValue);
            if (this.range) {
                this.viewHighValue = this.roundStep(this.viewHighValue);
            }
        }
        if (this.viewOptions.ceil != null) {
            this.maxValue = this.viewOptions.ceil;
        }
        else {
            this.maxValue = this.viewOptions.ceil = this.range ? this.viewHighValue : this.viewLowValue;
        }
        if (this.viewOptions.enforceRange) {
            this.viewLowValue = this.sanitizeValue(this.viewLowValue);
            if (this.range) {
                this.viewHighValue = this.sanitizeValue(this.viewHighValue);
            }
        }
        this.applyLowValue();
        if (this.range) {
            this.applyHighValue();
        }
        this.valueRange = this.maxValue - this.minValue;
    }
    /**
     * @return {?}
     */
    addAccessibility() {
        this.updateAriaAttributes();
        this.minHElem.attr('role', 'slider');
        if (this.viewOptions.keyboardSupport &&
            !(this.viewOptions.readOnly || this.viewOptions.disabled)) {
            this.minHElem.attr('tabindex', '0');
        }
        else {
            this.minHElem.attr('tabindex', '');
        }
        if (this.viewOptions.vertical) {
            this.minHElem.attr('aria-orientation', 'vertical');
        }
        if (this.viewOptions.ariaLabel) {
            this.minHElem.attr('aria-label', this.viewOptions.ariaLabel);
        }
        else if (this.viewOptions.ariaLabelledBy) {
            this.minHElem.attr('aria-labelledby', this.viewOptions.ariaLabelledBy);
        }
        if (this.range) {
            this.maxHElem.attr('role', 'slider');
            if (this.viewOptions.keyboardSupport &&
                !(this.viewOptions.readOnly || this.viewOptions.disabled)) {
                this.maxHElem.attr('tabindex', '0');
            }
            else {
                this.maxHElem.attr('tabindex', '');
            }
            if (this.viewOptions.vertical) {
                this.maxHElem.attr('aria-orientation', 'vertical');
            }
            if (this.viewOptions.ariaLabelHigh) {
                this.maxHElem.attr('aria-label', this.viewOptions.ariaLabelHigh);
            }
            else if (this.viewOptions.ariaLabelledByHigh) {
                this.maxHElem.attr('aria-labelledby', this.viewOptions.ariaLabelledByHigh);
            }
        }
    }
    /**
     * @return {?}
     */
    updateAriaAttributes() {
        this.minHElem.attr('aria-valuenow', this.value.toString());
        this.minHElem.attr('aria-valuetext', this.translate(this.value, LabelType.Low));
        this.minHElem.attr('aria-valuemin', this.minValue.toString());
        this.minHElem.attr('aria-valuemax', this.maxValue.toString());
        if (this.range) {
            this.maxHElem.attr('aria-valuenow', this.highValue.toString());
            this.maxHElem.attr('aria-valuetext', this.translate(this.highValue, LabelType.High));
            this.maxHElem.attr('aria-valuemin', this.minValue.toString());
            this.maxHElem.attr('aria-valuemax', this.maxValue.toString());
        }
    }
    /**
     * @return {?}
     */
    calcViewDimensions() {
        this.calculateElementDimension(this.minHElem);
        const /** @type {?} */ handleWidth = this.minHElem.dimension;
        this.handleHalfDim = handleWidth / 2;
        this.calculateElementDimension(this.fullBarElem);
        this.barDimension = this.fullBarElem.dimension;
        this.maxPos = this.barDimension - handleWidth;
        const /** @type {?} */ sliderElementBoundingRect = this.elementRef.nativeElement.getBoundingClientRect();
        this.sliderElementPosition = this.viewOptions.vertical ?
            sliderElementBoundingRect.bottom : sliderElementBoundingRect.left;
        if (this.initHasRun) {
            this.updateFloorLab();
            this.updateCeilLab();
            this.initHandles();
        }
    }
    /**
     * @return {?}
     */
    updateTicksScale() {
        if (!this.viewOptions.showTicks) {
            return;
        }
        const /** @type {?} */ ticksArray = this.viewOptions.ticksArray || this.getTicksArray();
        const /** @type {?} */ translate = this.viewOptions.vertical ? 'translateY' : 'translateX';
        if (this.viewOptions.rightToLeft) {
            ticksArray.reverse();
        }
        this.ticks = ticksArray.map((value) => {
            let /** @type {?} */ position = this.valueToPosition(value);
            if (this.viewOptions.vertical) {
                position = this.maxPos - position;
            }
            const /** @type {?} */ translation = translate + '(' + Math.round(position) + 'px)';
            const /** @type {?} */ tick = new Tick();
            tick.selected = this.isTickSelected(value);
            tick.style = {
                '-webkit-transform': translation,
                '-moz-transform': translation,
                '-o-transform': translation,
                '-ms-transform': translation,
                transform: translation,
            };
            if (tick.selected && this.viewOptions.getSelectionBarColor) {
                tick.style['background-color'] = this.getSelectionBarColor();
            }
            if (!tick.selected && this.viewOptions.getTickColor) {
                tick.style['background-color'] = this.getTickColor(value);
            }
            if (this.viewOptions.ticksTooltip) {
                tick.tooltip = this.viewOptions.ticksTooltip(value);
                tick.tooltipPlacement = this.viewOptions.vertical ? 'right' : 'top';
            }
            if (this.viewOptions.showTicksValues && (value % this.viewOptions.tickValueStep === 0)) {
                tick.value = this.getDisplayValue(value, LabelType.TickValue);
                if (this.viewOptions.ticksValuesTooltip) {
                    tick.valueTooltip = this.viewOptions.ticksValuesTooltip(value);
                    tick.valueTooltipPlacement = this.viewOptions.vertical
                        ? 'right'
                        : 'top';
                }
            }
            if (this.getLegend) {
                const /** @type {?} */ legend = this.getLegend(value);
                if (legend) {
                    tick.legend = legend;
                }
            }
            return tick;
        });
    }
    /**
     * @return {?}
     */
    getTicksArray() {
        const /** @type {?} */ step = (this.viewOptions.tickStep !== null) ? this.viewOptions.tickStep : this.step;
        const /** @type {?} */ ticksArray = [];
        for (let /** @type {?} */ value = this.minValue; value <= this.maxValue; value += step) {
            ticksArray.push(value);
        }
        return ticksArray;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isTickSelected(value) {
        if (!this.range) {
            if (this.viewOptions.showSelectionBarFromValue !== null) {
                const /** @type {?} */ center = this.viewOptions.showSelectionBarFromValue;
                if (this.viewLowValue > center &&
                    value >= center &&
                    value <= this.viewLowValue) {
                    return true;
                }
                else if (this.viewLowValue < center &&
                    value <= center &&
                    value >= this.viewLowValue) {
                    return true;
                }
            }
            else if (this.viewOptions.showSelectionBarEnd) {
                if (value >= this.viewLowValue) {
                    return true;
                }
            }
            else if (this.viewOptions.showSelectionBar && value <= this.viewLowValue) {
                return true;
            }
        }
        if (this.range && value >= this.viewLowValue && value <= this.viewHighValue) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    updateFloorLab() {
        this.setLabelValue(this.getDisplayValue(this.minValue, LabelType.Floor), this.flrLabElem);
        this.calculateElementDimension(this.flrLabElem);
        const /** @type {?} */ position = this.viewOptions.rightToLeft
            ? this.barDimension - this.flrLabElem.dimension
            : 0;
        this.setPosition(this.flrLabElem, position);
    }
    /**
     * @return {?}
     */
    updateCeilLab() {
        this.setLabelValue(this.getDisplayValue(this.maxValue, LabelType.Ceil), this.ceilLabElem);
        this.calculateElementDimension(this.ceilLabElem);
        const /** @type {?} */ position = this.viewOptions.rightToLeft
            ? 0
            : this.barDimension - this.ceilLabElem.dimension;
        this.setPosition(this.ceilLabElem, position);
    }
    /**
     * @param {?} which
     * @param {?} newPos
     * @return {?}
     */
    updateHandles(which, newPos) {
        if (which === HandleType.Low) {
            this.updateLowHandle(newPos);
        }
        else {
            this.updateHighHandle(newPos);
        }
        this.updateSelectionBar();
        this.updateTicksScale();
        if (this.range) {
            this.updateCmbLabel();
        }
    }
    /**
     * @param {?} labelType
     * @param {?} newPos
     * @return {?}
     */
    getHandleLabelPos(labelType, newPos) {
        const /** @type {?} */ labelDimension = labelType === HandleLabelType.Min ? this.minLabElem.dimension : this.maxLabElem.dimension;
        const /** @type {?} */ nearHandlePos = newPos - labelDimension / 2 + this.handleHalfDim;
        const /** @type {?} */ endOfBarPos = this.barDimension - labelDimension;
        if (!this.viewOptions.boundPointerLabels) {
            return nearHandlePos;
        }
        if ((this.viewOptions.rightToLeft && labelType === HandleLabelType.Min) ||
            (!this.viewOptions.rightToLeft && labelType === HandleLabelType.Max)) {
            return Math.min(nearHandlePos, endOfBarPos);
        }
        else {
            return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);
        }
    }
    /**
     * @param {?} newPos
     * @return {?}
     */
    updateLowHandle(newPos) {
        this.setPosition(this.minHElem, newPos);
        this.setLabelValue(this.getDisplayValue(this.viewLowValue, LabelType.Low), this.minLabElem);
        this.setPosition(this.minLabElem, this.getHandleLabelPos(HandleLabelType.Min, newPos));
        if (this.viewOptions.getPointerColor) {
            const /** @type {?} */ pointercolor = this.getPointerColor(PointerType.Min);
            this.minPointerStyle = {
                backgroundColor: pointercolor,
            };
        }
        if (this.viewOptions.autoHideLimitLabels) {
            this.shFloorCeil();
        }
    }
    /**
     * @param {?} newPos
     * @return {?}
     */
    updateHighHandle(newPos) {
        this.setPosition(this.maxHElem, newPos);
        this.setLabelValue(this.getDisplayValue(this.viewHighValue, LabelType.High), this.maxLabElem);
        this.setPosition(this.maxLabElem, this.getHandleLabelPos(HandleLabelType.Max, newPos));
        if (this.viewOptions.getPointerColor) {
            const /** @type {?} */ pointercolor = this.getPointerColor(PointerType.Max);
            this.maxPointerStyle = {
                backgroundColor: pointercolor,
            };
        }
        if (this.viewOptions.autoHideLimitLabels) {
            this.shFloorCeil();
        }
    }
    /**
     * @return {?}
     */
    shFloorCeil() {
        // Show based only on hideLimitLabels if pointer labels are hidden
        if (this.viewOptions.hidePointerLabels) {
            return;
        }
        let /** @type {?} */ flHidden = false;
        let /** @type {?} */ clHidden = false;
        const /** @type {?} */ isMinLabAtFloor = this.isLabelBelowFloorLab(this.minLabElem);
        const /** @type {?} */ isMinLabAtCeil = this.isLabelAboveCeilLab(this.minLabElem);
        const /** @type {?} */ isMaxLabAtCeil = this.isLabelAboveCeilLab(this.maxLabElem);
        const /** @type {?} */ isCmbLabAtFloor = this.isLabelBelowFloorLab(this.cmbLabElem);
        const /** @type {?} */ isCmbLabAtCeil = this.isLabelAboveCeilLab(this.cmbLabElem);
        if (isMinLabAtFloor) {
            flHidden = true;
            this.hideEl(this.flrLabElem);
        }
        else {
            flHidden = false;
            this.showEl(this.flrLabElem);
        }
        if (isMinLabAtCeil) {
            clHidden = true;
            this.hideEl(this.ceilLabElem);
        }
        else {
            clHidden = false;
            this.showEl(this.ceilLabElem);
        }
        if (this.range) {
            const /** @type {?} */ hideCeil = this.cmbLabelShown ? isCmbLabAtCeil : isMaxLabAtCeil;
            const /** @type {?} */ hideFloor = this.cmbLabelShown
                ? isCmbLabAtFloor
                : isMinLabAtFloor;
            if (hideCeil) {
                this.hideEl(this.ceilLabElem);
            }
            else if (!clHidden) {
                this.showEl(this.ceilLabElem);
            }
            // Hide or show floor label
            if (hideFloor) {
                this.hideEl(this.flrLabElem);
            }
            else if (!flHidden) {
                this.showEl(this.flrLabElem);
            }
        }
    }
    /**
     * @param {?} label
     * @return {?}
     */
    isLabelBelowFloorLab(label) {
        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;
        const /** @type {?} */ pos = label.position;
        const /** @type {?} */ dim = label.dimension;
        const /** @type {?} */ floorPos = this.flrLabElem.position;
        const /** @type {?} */ floorDim = this.flrLabElem.dimension;
        return isRTL
            ? pos + dim >= floorPos - 2
            : pos <= floorPos + floorDim + 2;
    }
    /**
     * @param {?} label
     * @return {?}
     */
    isLabelAboveCeilLab(label) {
        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;
        const /** @type {?} */ pos = label.position;
        const /** @type {?} */ dim = label.dimension;
        const /** @type {?} */ ceilPos = this.ceilLabElem.position;
        const /** @type {?} */ ceilDim = this.ceilLabElem.dimension;
        return isRTL ? pos <= ceilPos + ceilDim + 2 : pos + dim >= ceilPos - 2;
    }
    /**
     * @return {?}
     */
    updateSelectionBar() {
        let /** @type {?} */ position = 0;
        let /** @type {?} */ dimension = 0;
        const /** @type {?} */ isSelectionBarFromRight = this.viewOptions.rightToLeft
            ? !this.viewOptions.showSelectionBarEnd
            : this.viewOptions.showSelectionBarEnd;
        const /** @type {?} */ positionForRange = this.viewOptions.rightToLeft
            ? this.maxHElem.position + this.handleHalfDim
            : this.minHElem.position + this.handleHalfDim;
        if (this.range) {
            dimension = Math.abs(this.maxHElem.position - this.minHElem.position);
            position = positionForRange;
        }
        else {
            if (this.viewOptions.showSelectionBarFromValue !== null) {
                const /** @type {?} */ center = this.viewOptions.showSelectionBarFromValue;
                const /** @type {?} */ centerPosition = this.valueToPosition(center);
                const /** @type {?} */ isModelGreaterThanCenter = this.viewOptions.rightToLeft
                    ? this.viewLowValue <= center
                    : this.viewLowValue > center;
                if (isModelGreaterThanCenter) {
                    dimension = this.minHElem.position - centerPosition;
                    position = centerPosition + this.handleHalfDim;
                }
                else {
                    dimension = centerPosition - this.minHElem.position;
                    position = this.minHElem.position + this.handleHalfDim;
                }
            }
            else if (isSelectionBarFromRight) {
                dimension = Math.ceil(Math.abs(this.maxPos - this.minHElem.position) + this.handleHalfDim);
                position = Math.floor(this.minHElem.position + this.handleHalfDim);
            }
            else {
                dimension = this.minHElem.position + this.handleHalfDim;
                position = 0;
            }
        }
        this.setDimension(this.selBarElem, dimension);
        this.setPosition(this.selBarElem, position);
        if (this.range && this.viewOptions.showOuterSelectionBars) {
            if (this.viewOptions.rightToLeft) {
                this.setDimension(this.rightOutSelBar, position);
                this.setPosition(this.rightOutSelBar, 0);
                this.calculateElementDimension(this.fullBarElem);
                this.setDimension(this.leftOutSelBar, this.fullBarElem.dimension - (position + dimension));
                this.setPosition(this.leftOutSelBar, position + dimension);
            }
            else {
                this.setDimension(this.leftOutSelBar, position);
                this.setPosition(this.leftOutSelBar, 0);
                this.calculateElementDimension(this.fullBarElem);
                this.setDimension(this.rightOutSelBar, this.fullBarElem.dimension - (position + dimension));
                this.setPosition(this.rightOutSelBar, position + dimension);
            }
        }
        if (this.viewOptions.getSelectionBarColor) {
            const /** @type {?} */ color = this.getSelectionBarColor();
            this.barStyle = {
                backgroundColor: color,
            };
        }
        else if (this.viewOptions.selectionBarGradient) {
            const /** @type {?} */ offset = this.viewOptions.showSelectionBarFromValue !== null
                ? this.valueToPosition(this.viewOptions.showSelectionBarFromValue)
                : 0;
            const /** @type {?} */ reversed = (offset - position > 0 && !isSelectionBarFromRight) || (offset - position <= 0 && isSelectionBarFromRight);
            const /** @type {?} */ direction = this.viewOptions.vertical
                ? reversed ? 'bottom' : 'top'
                : reversed ? 'left' : 'right';
            this.barStyle = {
                backgroundImage: 'linear-gradient(to ' +
                    direction +
                    ', ' +
                    this.viewOptions.selectionBarGradient.from +
                    ' 0%,' +
                    this.viewOptions.selectionBarGradient.to +
                    ' 100%)',
            };
            if (this.viewOptions.vertical) {
                this.barStyle.backgroundPosition =
                    'center ' +
                        (offset +
                            dimension +
                            position +
                            (reversed ? -this.handleHalfDim : 0)) +
                        'px';
                this.barStyle.backgroundSize =
                    '100% ' + (this.barDimension - this.handleHalfDim) + 'px';
            }
            else {
                this.barStyle.backgroundPosition =
                    offset -
                        position +
                        (reversed ? this.handleHalfDim : 0) +
                        'px center';
                this.barStyle.backgroundSize =
                    this.barDimension - this.handleHalfDim + 'px 100%';
            }
        }
    }
    /**
     * @return {?}
     */
    getSelectionBarColor() {
        if (this.range) {
            return this.viewOptions.getSelectionBarColor(this.value, this.highValue);
        }
        return this.viewOptions.getSelectionBarColor(this.value);
    }
    /**
     * @param {?} pointerType
     * @return {?}
     */
    getPointerColor(pointerType) {
        if (pointerType === PointerType.Max) {
            return this.viewOptions.getPointerColor(this.highValue, pointerType);
        }
        return this.viewOptions.getPointerColor(this.value, pointerType);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getTickColor(value) {
        return this.viewOptions.getTickColor(value);
    }
    /**
     * @return {?}
     */
    updateCmbLabel() {
        let /** @type {?} */ isLabelOverlap = null;
        if (this.viewOptions.rightToLeft) {
            isLabelOverlap =
                this.minLabElem.position - this.minLabElem.dimension - 10 <= this.maxLabElem.position;
        }
        else {
            isLabelOverlap =
                this.minLabElem.position + this.minLabElem.dimension + 10 >= this.maxLabElem.position;
        }
        if (isLabelOverlap) {
            const /** @type {?} */ lowTr = this.getDisplayValue(this.viewLowValue, LabelType.Low);
            const /** @type {?} */ highTr = this.getDisplayValue(this.viewHighValue, LabelType.High);
            const /** @type {?} */ labelVal = this.viewOptions.rightToLeft
                ? this.combineLabels(highTr, lowTr)
                : this.combineLabels(lowTr, highTr);
            this.setLabelValue(labelVal, this.cmbLabElem);
            const /** @type {?} */ pos = this.viewOptions.boundPointerLabels
                ? Math.min(Math.max(this.selBarElem.position +
                    this.selBarElem.dimension / 2 -
                    this.cmbLabElem.dimension / 2, 0), this.barDimension - this.cmbLabElem.dimension)
                : this.selBarElem.position + this.selBarElem.dimension / 2 - this.cmbLabElem.dimension / 2;
            this.setPosition(this.cmbLabElem, pos);
            this.cmbLabelShown = true;
            this.hideEl(this.minLabElem);
            this.hideEl(this.maxLabElem);
            this.showEl(this.cmbLabElem);
        }
        else {
            this.cmbLabelShown = false;
            this.updateHighHandle(this.valueToPosition(this.viewHighValue));
            this.updateLowHandle(this.valueToPosition(this.viewLowValue));
            this.showEl(this.maxLabElem);
            this.showEl(this.minLabElem);
            this.hideEl(this.cmbLabElem);
        }
        if (this.viewOptions.autoHideLimitLabels) {
            this.shFloorCeil();
        }
    }
    /**
     * @param {?} value
     * @param {?} which
     * @return {?}
     */
    getDisplayValue(value, which) {
        if (this.viewOptions.stepsArray && !this.viewOptions.bindIndexForStepsArray) {
            value = this.getStepValue(value);
        }
        return this.translate(value, which);
    }
    /**
     * @param {?} value
     * @param {?=} customStep
     * @return {?}
     */
    roundStep(value, customStep) {
        const /** @type {?} */ step = customStep ? customStep : this.step;
        let /** @type {?} */ steppedDifference = +((value - this.minValue) / step).toPrecision(12);
        steppedDifference = Math.round(steppedDifference) * step;
        const /** @type {?} */ newValue = (this.minValue + steppedDifference).toFixed(this.precision);
        return +newValue;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    hideEl(element) {
        element.css('visibility', 'hidden');
    }
    /**
     * @param {?} element
     * @return {?}
     */
    showEl(element) {
        if (!!element.alwaysHide) {
            return;
        }
        element.css('visibility', 'visible');
    }
    /**
     * @param {?} elem
     * @param {?} pos
     * @return {?}
     */
    setPosition(elem, pos) {
        elem.position = pos;
        if (this.viewOptions.vertical) {
            elem.css('bottom', Math.round(pos) + 'px');
        }
        else {
            elem.css('left', Math.round(pos) + 'px');
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    calculateElementDimension(elem) {
        const /** @type {?} */ val = elem.getBoundingClientRect();
        if (this.viewOptions.vertical) {
            elem.dimension = (val.bottom - val.top) * this.viewOptions.scale;
        }
        else {
            elem.dimension = (val.right - val.left) * this.viewOptions.scale;
        }
    }
    /**
     * @param {?} elem
     * @param {?} dim
     * @return {?}
     */
    setDimension(elem, dim) {
        elem.dimension = dim;
        if (this.viewOptions.vertical) {
            elem.css('height', Math.round(dim) + 'px');
        }
        else {
            elem.css('width', Math.round(dim) + 'px');
        }
        return dim;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    sanitizeValue(val) {
        return Math.min(Math.max(val, this.minValue), this.maxValue);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    valueToPosition(val) {
        let /** @type {?} */ fn = ValuePositionConverter.linearValueToPosition;
        if (this.viewOptions.customValueToPosition) {
            fn = this.viewOptions.customValueToPosition;
        }
        else if (this.viewOptions.logScale) {
            fn = ValuePositionConverter.logValueToPosition;
        }
        val = this.sanitizeValue(val);
        let /** @type {?} */ percent = fn(val, this.minValue, this.maxValue) || 0;
        if (this.viewOptions.rightToLeft) {
            percent = 1 - percent;
        }
        return percent * this.maxPos;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    positionToValue(position) {
        let /** @type {?} */ percent = position / this.maxPos;
        if (this.viewOptions.rightToLeft) {
            percent = 1 - percent;
        }
        let /** @type {?} */ fn = ValuePositionConverter.linearPositionToValue;
        if (this.viewOptions.customPositionToValue) {
            fn = this.viewOptions.customPositionToValue;
        }
        else if (this.viewOptions.logScale) {
            fn = ValuePositionConverter.logPositionToValue;
        }
        return fn(percent, this.minValue, this.maxValue) || 0;
    }
    /**
     * @param {?} event
     * @param {?} targetTouchId
     * @return {?}
     */
    getEventXY(event, targetTouchId) {
        if (event instanceof MouseEvent) {
            return this.viewOptions.vertical ? event.clientY : event.clientX;
        }
        let /** @type {?} */ touchIndex = 0;
        const /** @type {?} */ touches = event.touches;
        if (targetTouchId !== undefined) {
            for (let /** @type {?} */ i = 0; i < touches.length; i++) {
                if (touches[i].identifier === targetTouchId) {
                    touchIndex = i;
                    break;
                }
            }
        }
        // Return the target touch or if the target touch was not found in the event
        // returns the coordinates of the first touch
        return this.viewOptions.vertical ? touches[touchIndex].clientY : touches[touchIndex].clientX;
    }
    /**
     * @param {?} event
     * @param {?=} targetTouchId
     * @return {?}
     */
    getEventPosition(event, targetTouchId) {
        const /** @type {?} */ sliderPos = this.sliderElementPosition;
        let /** @type {?} */ eventPos = 0;
        if (this.viewOptions.vertical) {
            eventPos = -this.getEventXY(event, targetTouchId) + sliderPos;
        }
        else {
            eventPos = this.getEventXY(event, targetTouchId) - sliderPos;
        }
        return eventPos * this.viewOptions.scale - this.handleHalfDim;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getNearestHandle(event) {
        if (!this.range) {
            return this.minHElem;
        }
        const /** @type {?} */ position = this.getEventPosition(event);
        const /** @type {?} */ distanceMin = Math.abs(position - this.minHElem.position);
        const /** @type {?} */ distanceMax = Math.abs(position - this.maxHElem.position);
        if (distanceMin < distanceMax) {
            return this.minHElem;
        }
        else if (distanceMin > distanceMax) {
            return this.maxHElem;
        }
        else if (!this.viewOptions.rightToLeft) {
            // if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH
            return position < this.minHElem.position ? this.minHElem : this.maxHElem;
        }
        else {
            // reverse in rtl
            return position > this.minHElem.position ? this.minHElem : this.maxHElem;
        }
    }
    /**
     * @param {?} el
     * @return {?}
     */
    focusElement(el) {
        el.focus();
    }
    /**
     * @return {?}
     */
    bindEvents() {
        const /** @type {?} */ draggableRange = this.viewOptions.draggableRange;
        if (!this.viewOptions.onlyBindHandles) {
            this.selBarElem.on('mousedown', (event) => this.onBarStart(draggableRange, null, event));
            this.selBarElem.on('mousedown', (event) => this.onBarMove(draggableRange, this.selBarElem, event));
        }
        if (this.viewOptions.draggableRangeOnly) {
            this.minHElem.on('mousedown', (event) => this.onBarStart(draggableRange, null, event));
            this.maxHElem.on('mousedown', (event) => this.onBarStart(draggableRange, null, event));
        }
        else {
            this.minHElem.on('mousedown', (event) => this.onStart(this.minHElem, HandleType.Low, event));
            if (this.range) {
                this.maxHElem.on('mousedown', (event) => this.onStart(this.maxHElem, HandleType.High, event));
            }
            if (!this.viewOptions.onlyBindHandles) {
                this.fullBarElem.on('mousedown', (event) => this.onStart(null, null, event));
                this.fullBarElem.on('mousedown', (event) => this.onMove(this.fullBarElem, event));
                this.ticksElem.on('mousedown', (event) => this.onStart(null, null, event));
                this.ticksElem.on('mousedown', (event) => this.onTickClick(this.ticksElem, event));
            }
        }
        if (!this.viewOptions.onlyBindHandles) {
            this.selBarElem.on('touchstart', (event) => this.onBarStart(draggableRange, null, event));
            this.selBarElem.on('touchstart', (event) => this.onBarMove(draggableRange, this.selBarElem, event));
        }
        if (this.viewOptions.draggableRangeOnly) {
            this.minHElem.on('touchstart', (event) => this.onBarStart(draggableRange, null, event));
            this.maxHElem.on('touchstart', (event) => this.onBarStart(draggableRange, null, event));
        }
        else {
            this.minHElem.on('touchstart', (event) => this.onStart(this.minHElem, HandleType.Low, event));
            if (this.range) {
                this.maxHElem.on('touchstart', (event) => this.onStart(this.maxHElem, HandleType.High, event));
            }
            if (!this.viewOptions.onlyBindHandles) {
                this.fullBarElem.on('touchstart', (event) => this.onStart(null, null, event));
                this.fullBarElem.on('touchstart', (event) => this.onMove(this.fullBarElem, event));
                this.ticksElem.on('touchstart', (event) => this.onStart(null, null, event));
                this.ticksElem.on('touchstart', (event) => this.onTickClick(this.ticksElem, event));
            }
        }
        if (this.viewOptions.keyboardSupport) {
            this.minHElem.on('focus', () => this.onPointerFocus(this.minHElem, HandleType.Low));
            if (this.range) {
                this.maxHElem.on('focus', () => this.onPointerFocus(this.maxHElem, HandleType.High));
            }
        }
    }
    /**
     * @return {?}
     */
    unbindEvents() {
        this.minHElem.off();
        this.maxHElem.off();
        this.fullBarElem.off();
        this.selBarElem.off();
        this.ticksElem.off();
    }
    /**
     * @param {?} draggableRange
     * @param {?} pointer
     * @param {?} event
     * @return {?}
     */
    onBarStart(draggableRange, pointer, event) {
        if (draggableRange) {
            this.onDragStart(pointer, HandleType.High, event);
        }
        else {
            this.onStart(pointer, HandleType.Low, event);
        }
    }
    /**
     * @param {?} draggableRange
     * @param {?} pointer
     * @param {?} event
     * @return {?}
     */
    onBarMove(draggableRange, pointer, event) {
        if (draggableRange) {
            this.onDragMove(pointer, event);
        }
        else {
            this.onMove(pointer, event);
        }
    }
    /**
     * @param {?} pointer
     * @param {?} ref
     * @param {?} event
     * @return {?}
     */
    onStart(pointer, ref, event) {
        let /** @type {?} */ moveEvent = '';
        let /** @type {?} */ endEvent = '';
        if (CompatibilityHelper.isTouchEvent(event)) {
            moveEvent = 'touchmove';
            endEvent = 'touchend';
        }
        else {
            moveEvent = 'mousemove';
            endEvent = 'mouseup';
        }
        event.stopPropagation();
        event.preventDefault();
        // We have to do this in case the HTML where the sliders are on
        // have been animated into view.
        this.calcViewDimensions();
        if (pointer) {
            this.tracking = ref;
        }
        else {
            pointer = this.getNearestHandle(event);
            this.tracking = pointer === this.minHElem ? HandleType.Low : HandleType.High;
        }
        pointer.addClass('ng5-slider-active');
        if (this.viewOptions.keyboardSupport) {
            this.focusElement(pointer);
        }
        const /** @type {?} */ ehMove = (e) => this.dragging.active ? this.onDragMove(pointer, e) : this.onMove(pointer, e);
        if (this.onMoveUnsubscribe !== null) {
            this.onMoveUnsubscribe();
        }
        this.onMoveUnsubscribe = this.renderer.listen('document', moveEvent, ehMove);
        const /** @type {?} */ ehEnd = (e) => this.onEnd(e);
        if (this.onEndUnsubscribe !== null) {
            this.onEndUnsubscribe();
        }
        this.onEndUnsubscribe = this.renderer.listen('document', endEvent, ehEnd);
        this.userChangeStart.emit(this.getChangeContext());
        if (CompatibilityHelper.isTouchEvent(event) && (/** @type {?} */ (event)).changedTouches) {
            // Store the touch identifier
            if (!this.touchId) {
                this.isDragging = true;
                this.touchId = (/** @type {?} */ (event)).changedTouches[0].identifier;
            }
        }
    }
    /**
     * @param {?} pointer
     * @param {?} event
     * @param {?=} fromTick
     * @return {?}
     */
    onMove(pointer, event, fromTick) {
        let /** @type {?} */ touchForThisSlider;
        if (CompatibilityHelper.isTouchEvent(event)) {
            const /** @type {?} */ changedTouches = (/** @type {?} */ (event)).changedTouches;
            for (let /** @type {?} */ i = 0; i < changedTouches.length; i++) {
                if (changedTouches[i].identifier === this.touchId) {
                    touchForThisSlider = changedTouches[i];
                    break;
                }
            }
            if (!touchForThisSlider) {
                return;
            }
        }
        const /** @type {?} */ newPos = this.getEventPosition(event, touchForThisSlider ? touchForThisSlider.identifier : undefined);
        let /** @type {?} */ newValue;
        const /** @type {?} */ ceilValue = this.viewOptions.rightToLeft
            ? this.minValue
            : this.maxValue;
        const /** @type {?} */ flrValue = this.viewOptions.rightToLeft ? this.maxValue : this.minValue;
        if (newPos <= 0) {
            newValue = flrValue;
        }
        else if (newPos >= this.maxPos) {
            newValue = ceilValue;
        }
        else {
            newValue = this.positionToValue(newPos);
            if (fromTick && this.viewOptions.tickStep !== null) {
                newValue = this.roundStep(newValue, this.viewOptions.tickStep);
            }
            else {
                // TODO: what if tickArray option is specified?
                newValue = this.roundStep(newValue);
            }
        }
        this.positionTrackingHandle(newValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnd(event) {
        if (CompatibilityHelper.isTouchEvent(event)) {
            const /** @type {?} */ changedTouches = (/** @type {?} */ (event)).changedTouches;
            if (changedTouches[0].identifier !== this.touchId) {
                return;
            }
        }
        this.isDragging = false;
        this.touchId = null;
        if (!this.viewOptions.keyboardSupport) {
            this.minHElem.removeClass('ng5-slider-active');
            this.maxHElem.removeClass('ng5-slider-active');
            this.tracking = null;
        }
        this.dragging.active = false;
        if (this.onMoveUnsubscribe !== null) {
            this.onMoveUnsubscribe();
        }
        if (this.onEndUnsubscribe !== null) {
            this.onEndUnsubscribe();
        }
        this.userChangeEnd.emit(this.getChangeContext());
    }
    /**
     * @param {?} pointer
     * @param {?} event
     * @return {?}
     */
    onTickClick(pointer, event) {
        this.onMove(pointer, event, true);
    }
    /**
     * @param {?} pointer
     * @param {?} ref
     * @return {?}
     */
    onPointerFocus(pointer, ref) {
        this.tracking = ref;
        pointer.on('blur', () => this.onPointerBlur(pointer));
        pointer.on('keydown', (event) => this.onKeyboardEvent(event));
        pointer.on('keyup', () => this.onKeyUp());
        this.firstKeyDown = true;
        pointer.addClass('ng5-slider-active');
        this.currentFocusElement = {
            pointer: pointer,
            ref: ref,
        };
    }
    /**
     * @return {?}
     */
    onKeyUp() {
        this.firstKeyDown = true;
        this.userChangeEnd.emit(this.getChangeContext());
    }
    /**
     * @param {?} pointer
     * @return {?}
     */
    onPointerBlur(pointer) {
        pointer.off('blur');
        pointer.off('keydown');
        pointer.off('keyup');
        pointer.removeClass('ng5-slider-active');
        if (!this.isDragging) {
            this.tracking = null;
            this.currentFocusElement = null;
        }
    }
    /**
     * @param {?} currentValue
     * @return {?}
     */
    getKeyActions(currentValue) {
        let /** @type {?} */ increaseStep = currentValue + this.step;
        let /** @type {?} */ decreaseStep = currentValue - this.step;
        let /** @type {?} */ increasePage = currentValue + this.valueRange / 10;
        let /** @type {?} */ decreasePage = currentValue - this.valueRange / 10;
        if (this.viewOptions.reversedControls) {
            increaseStep = currentValue - this.step;
            decreaseStep = currentValue + this.step;
            increasePage = currentValue - this.valueRange / 10;
            decreasePage = currentValue + this.valueRange / 10;
        }
        // Left to right default actions
        const /** @type {?} */ actions = {
            UP: increaseStep,
            DOWN: decreaseStep,
            LEFT: decreaseStep,
            RIGHT: increaseStep,
            PAGEUP: increasePage,
            PAGEDOWN: decreasePage,
            HOME: this.viewOptions.reversedControls ? this.maxValue : this.minValue,
            END: this.viewOptions.reversedControls ? this.minValue : this.maxValue,
        };
        // right to left means swapping right and left arrows
        if (this.viewOptions.rightToLeft) {
            actions["LEFT"] = increaseStep;
            actions["RIGHT"] = decreaseStep;
            // right to left and vertical means we also swap up and down
            if (this.viewOptions.vertical) {
                actions["UP"] = decreaseStep;
                actions["DOWN"] = increaseStep;
            }
        }
        return actions;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyboardEvent(event) {
        const /** @type {?} */ currentValue = this.getCurrentTrackingValue();
        const /** @type {?} */ keyCode = event.keyCode || event.which;
        const /** @type {?} */ keys = {
            38: 'UP',
            40: 'DOWN',
            37: 'LEFT',
            39: 'RIGHT',
            33: 'PAGEUP',
            34: 'PAGEDOWN',
            36: 'HOME',
            35: 'END',
        };
        const /** @type {?} */ actions = this.getKeyActions(currentValue);
        const /** @type {?} */ key = keys[keyCode];
        const /** @type {?} */ action = actions[key];
        if (action == null || this.tracking === null) {
            return;
        }
        event.preventDefault();
        if (this.firstKeyDown) {
            this.firstKeyDown = false;
            this.userChangeStart.emit(this.getChangeContext());
        }
        const /** @type {?} */ newValue = this.roundStep(this.sanitizeValue(action));
        if (!this.viewOptions.draggableRangeOnly) {
            this.positionTrackingHandle(newValue);
        }
        else {
            const /** @type {?} */ difference = this.viewHighValue - this.viewLowValue;
            let /** @type {?} */ newMinValue;
            let /** @type {?} */ newMaxValue;
            if (this.tracking === HandleType.Low) {
                newMinValue = newValue;
                newMaxValue = newValue + difference;
                if (newMaxValue > this.maxValue) {
                    newMaxValue = this.maxValue;
                    newMinValue = newMaxValue - difference;
                }
            }
            else {
                newMaxValue = newValue;
                newMinValue = newValue - difference;
                if (newMinValue < this.minValue) {
                    newMinValue = this.minValue;
                    newMaxValue = newMinValue + difference;
                }
            }
            this.positionTrackingBar(newMinValue, newMaxValue);
        }
    }
    /**
     * @param {?} pointer
     * @param {?} ref
     * @param {?} event
     * @return {?}
     */
    onDragStart(pointer, ref, event) {
        const /** @type {?} */ position = this.getEventPosition(event);
        this.dragging = new Dragging();
        this.dragging.active = true;
        this.dragging.value = this.positionToValue(position);
        this.dragging.difference = this.viewHighValue - this.viewLowValue;
        this.dragging.lowLimit = this.viewOptions.rightToLeft
            ? this.minHElem.position - position
            : position - this.minHElem.position;
        this.dragging.highLimit = this.viewOptions.rightToLeft
            ? position - this.maxHElem.position
            : this.maxHElem.position - position;
        this.onStart(pointer, ref, event);
    }
    /**
     * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft
     * @param {?} newPos
     * @param {?} outOfBounds
     * @param {?} isAbove
     * @return {?}
     */
    getMinValue(newPos, outOfBounds, isAbove) {
        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;
        let /** @type {?} */ value = null;
        if (outOfBounds) {
            if (isAbove) {
                value = isRTL
                    ? this.minValue
                    : this.maxValue - this.dragging.difference;
            }
            else {
                value = isRTL
                    ? this.maxValue - this.dragging.difference
                    : this.minValue;
            }
        }
        else {
            value = isRTL
                ? this.positionToValue(newPos + this.dragging.lowLimit)
                : this.positionToValue(newPos - this.dragging.lowLimit);
        }
        return this.roundStep(value);
    }
    /**
     * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft
     * @param {?} newPos
     * @param {?} outOfBounds
     * @param {?} isAbove
     * @return {?}
     */
    getMaxValue(newPos, outOfBounds, isAbove) {
        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;
        let /** @type {?} */ value = null;
        if (outOfBounds) {
            if (isAbove) {
                value = isRTL
                    ? this.minValue + this.dragging.difference
                    : this.maxValue;
            }
            else {
                value = isRTL
                    ? this.maxValue
                    : this.minValue + this.dragging.difference;
            }
        }
        else {
            if (isRTL) {
                value =
                    this.positionToValue(newPos + this.dragging.lowLimit) +
                        this.dragging.difference;
            }
            else {
                value =
                    this.positionToValue(newPos - this.dragging.lowLimit) +
                        this.dragging.difference;
            }
        }
        return this.roundStep(value);
    }
    /**
     * @param {?} pointer
     * @param {?=} event
     * @return {?}
     */
    onDragMove(pointer, event) {
        const /** @type {?} */ newPos = this.getEventPosition(event);
        let /** @type {?} */ ceilLimit, /** @type {?} */ flrLimit, /** @type {?} */ flrHElem, /** @type {?} */ ceilHElem;
        if (this.viewOptions.rightToLeft) {
            ceilLimit = this.dragging.lowLimit;
            flrLimit = this.dragging.highLimit;
            flrHElem = this.maxHElem;
            ceilHElem = this.minHElem;
        }
        else {
            ceilLimit = this.dragging.highLimit;
            flrLimit = this.dragging.lowLimit;
            flrHElem = this.minHElem;
            ceilHElem = this.maxHElem;
        }
        const /** @type {?} */ isUnderFlrLimit = newPos <= flrLimit;
        const /** @type {?} */ isOverCeilLimit = newPos >= this.maxPos - ceilLimit;
        let /** @type {?} */ newMinValue;
        let /** @type {?} */ newMaxValue;
        if (isUnderFlrLimit) {
            if (flrHElem.position === 0) {
                return;
            }
            newMinValue = this.getMinValue(newPos, true, false);
            newMaxValue = this.getMaxValue(newPos, true, false);
        }
        else if (isOverCeilLimit) {
            if (ceilHElem.position === this.maxPos) {
                return;
            }
            newMaxValue = this.getMaxValue(newPos, true, true);
            newMinValue = this.getMinValue(newPos, true, true);
        }
        else {
            newMinValue = this.getMinValue(newPos, false, false);
            newMaxValue = this.getMaxValue(newPos, false, false);
        }
        this.positionTrackingBar(newMinValue, newMaxValue);
    }
    /**
     * @param {?} newMinValue
     * @param {?} newMaxValue
     * @return {?}
     */
    positionTrackingBar(newMinValue, newMaxValue) {
        if (this.viewOptions.minLimit != null &&
            newMinValue < this.viewOptions.minLimit) {
            newMinValue = this.viewOptions.minLimit;
            newMaxValue = newMinValue + this.dragging.difference;
        }
        if (this.viewOptions.maxLimit != null &&
            newMaxValue > this.viewOptions.maxLimit) {
            newMaxValue = this.viewOptions.maxLimit;
            newMinValue = newMaxValue - this.dragging.difference;
        }
        this.viewLowValue = newMinValue;
        this.viewHighValue = newMaxValue;
        this.applyLowValue();
        if (this.range) {
            this.applyHighValue();
        }
        this.applyModel(true);
        this.updateHandles(HandleType.Low, this.valueToPosition(newMinValue));
        this.updateHandles(HandleType.High, this.valueToPosition(newMaxValue));
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    positionTrackingHandle(newValue) {
        let /** @type {?} */ valueChanged = false;
        newValue = this.applyMinMaxLimit(newValue);
        if (this.range) {
            if (this.viewOptions.pushRange) {
                newValue = this.applyPushRange(newValue);
                valueChanged = true;
            }
            else {
                if (this.viewOptions.noSwitching) {
                    if (this.tracking === HandleType.Low && newValue > this.viewHighValue) {
                        newValue = this.applyMinMaxRange(this.viewHighValue);
                    }
                    else if (this.tracking === HandleType.High &&
                        newValue < this.viewLowValue) {
                        newValue = this.applyMinMaxRange(this.viewLowValue);
                    }
                }
                newValue = this.applyMinMaxRange(newValue);
                /* This is to check if we need to switch the min and max handles */
                if (this.tracking === HandleType.Low && newValue > this.viewHighValue) {
                    this.viewLowValue = this.viewHighValue;
                    this.applyLowValue();
                    this.applyModel(false);
                    this.updateHandles(HandleType.Low, this.maxHElem.position);
                    this.updateAriaAttributes();
                    this.tracking = HandleType.High;
                    this.minHElem.removeClass('ng5-slider-active');
                    this.maxHElem.addClass('ng5-slider-active');
                    if (this.viewOptions.keyboardSupport) {
                        this.focusElement(this.maxHElem);
                    }
                    valueChanged = true;
                }
                else if (this.tracking === HandleType.High &&
                    newValue < this.viewLowValue) {
                    this.viewHighValue = this.viewLowValue;
                    this.applyHighValue();
                    this.applyModel(false);
                    this.updateHandles(HandleType.High, this.minHElem.position);
                    this.updateAriaAttributes();
                    this.tracking = HandleType.Low;
                    this.maxHElem.removeClass('ng5-slider-active');
                    this.minHElem.addClass('ng5-slider-active');
                    if (this.viewOptions.keyboardSupport) {
                        this.focusElement(this.minHElem);
                    }
                    valueChanged = true;
                }
            }
        }
        if (this.getCurrentTrackingValue() !== newValue) {
            if (this.tracking === HandleType.Low) {
                this.viewLowValue = newValue;
                this.applyLowValue();
            }
            else {
                this.viewHighValue = newValue;
                this.applyHighValue();
            }
            this.applyModel(false);
            this.updateHandles(this.tracking, this.valueToPosition(newValue));
            this.updateAriaAttributes();
            valueChanged = true;
        }
        if (valueChanged) {
            this.applyModel(true);
        }
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    applyMinMaxLimit(newValue) {
        if (this.viewOptions.minLimit != null && newValue < this.viewOptions.minLimit) {
            return this.viewOptions.minLimit;
        }
        if (this.viewOptions.maxLimit != null && newValue > this.viewOptions.maxLimit) {
            return this.viewOptions.maxLimit;
        }
        return newValue;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    applyMinMaxRange(newValue) {
        const /** @type {?} */ oppositeValue = this.tracking === HandleType.Low ? this.viewHighValue : this.viewLowValue;
        const /** @type {?} */ difference = Math.abs(newValue - oppositeValue);
        if (this.viewOptions.minRange != null) {
            if (difference < this.viewOptions.minRange) {
                if (this.tracking === HandleType.Low) {
                    return this.viewHighValue - this.viewOptions.minRange;
                }
                else {
                    return this.viewLowValue + this.viewOptions.minRange;
                }
            }
        }
        if (this.viewOptions.maxRange != null) {
            if (difference > this.viewOptions.maxRange) {
                if (this.tracking === HandleType.Low) {
                    return this.viewHighValue - this.viewOptions.maxRange;
                }
                else {
                    return this.viewLowValue + this.viewOptions.maxRange;
                }
            }
        }
        return newValue;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    applyPushRange(newValue) {
        const /** @type {?} */ difference = this.tracking === HandleType.Low
            ? this.viewHighValue - newValue
            : newValue - this.viewLowValue;
        const /** @type {?} */ minRange = this.viewOptions.minRange !== null
            ? this.viewOptions.minRange
            : this.viewOptions.step;
        const /** @type {?} */ maxRange = this.viewOptions.maxRange;
        // if smaller than minRange
        if (difference < minRange) {
            if (this.tracking === HandleType.Low) {
                this.viewHighValue = Math.min(newValue + minRange, this.maxValue);
                newValue = this.viewHighValue - minRange;
                this.applyHighValue();
                this.updateHandles(HandleType.High, this.valueToPosition(this.viewHighValue));
            }
            else {
                this.viewLowValue = Math.max(newValue - minRange, this.minValue);
                newValue = this.viewLowValue + minRange;
                this.applyLowValue();
                this.updateHandles(HandleType.Low, this.valueToPosition(this.viewLowValue));
            }
            this.updateAriaAttributes();
        }
        else if (maxRange !== null && difference > maxRange) {
            // if greater than maxRange
            if (this.tracking === HandleType.Low) {
                this.viewHighValue = newValue + maxRange;
                this.applyHighValue();
                this.updateHandles(HandleType.High, this.valueToPosition(this.viewHighValue));
            }
            else {
                this.viewLowValue = newValue - maxRange;
                this.applyLowValue();
                this.updateHandles(HandleType.Low, this.valueToPosition(this.viewLowValue));
            }
            this.updateAriaAttributes();
        }
        return newValue;
    }
    /**
     * @param {?} callUserChange
     * @return {?}
     */
    applyModel(callUserChange) {
        this.internalChange = true;
        this.valueChange.emit(this.value);
        this.highValueChange.emit(this.highValue);
        if (callUserChange) {
            this.userChange.emit(this.getChangeContext());
        }
        this.internalChange = false;
    }
    /**
     * @return {?}
     */
    getChangeContext() {
        const /** @type {?} */ changeContext = new ChangeContext();
        changeContext.pointerType = this.tracking === HandleType.Low ? PointerType.Min : PointerType.Max;
        changeContext.value = this.value;
        changeContext.highValue = this.highValue;
        return changeContext;
    }
}
SliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng5-slider',
                template: `<!-- // 0 (left) Highlight outside two handles -->
<span ng5SliderLeftOutSelElem class="ng5-slider-span ng5-slider-bar-wrapper ng5-slider-left-out-selection">
  <span class="ng5-slider-span ng5-slider-bar"></span>
</span>
<!-- // 1 (right) Highlight outside two handles -->
<span ng5SliderRightOutSelElem class="ng5-slider-span ng5-slider-bar-wrapper ng5-slider-right-out-selection">
  <span class="ng5-slider-span ng5-slider-bar"></span>
</span>
<!-- // 2 The slider bar -->
<span ng5SliderFullBarElem class="ng5-slider-span ng5-slider-bar-wrapper">
  <span class="ng5-slider-span ng5-slider-bar"></span>
</span>
<!-- // 3 Highlight between two handles -->
<span ng5SliderSelBarElem class="ng5-slider-span ng5-slider-bar-wrapper">
  <span class="ng5-slider-span ng5-slider-bar ng5-slider-selection" [ngStyle]="barStyle"></span>
</span>
<!-- // 4 Left slider handle -->
<span ng5SliderMinHElem class="ng5-slider-span ng5-slider-pointer ng5-slider-pointer-min" [ngStyle]=minPointerStyle></span>
<!-- // 5 Right slider handle -->
<span ng5SliderMaxHElem class="ng5-slider-span ng5-slider-pointer ng5-slider-pointer-max" [ngStyle]=maxPointerStyle></span>
<!-- // 6 Floor label -->
<span ng5SliderFlrLabElem class="ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-floor"></span>
<!-- // 7 Ceiling label -->
<span ng5SliderCeilLabElem class="ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-ceil"></span>
<!-- // 8 Label above left slider handle -->
<span ng5SliderMinLabElem class="ng5-slider-span ng5-slider-bubble ng5-slider-model-value"></span>
<!-- // 9 Label above right slider handle -->
<span ng5SliderMaxLabElem class="ng5-slider-span ng5-slider-bubble ng5-slider-model-high"></span>
<!-- // 10 Range label when the slider handles are close ex. 15 - 17 -->
<span ng5SliderCmbLabElem class="ng5-slider-span ng5-slider-bubble"></span>
<!-- // 11 The ticks -->
<span ng5SliderTicksElem [hidden]="!showTicks" class="ng5-slider-ticks">
  <span *ngFor="let t of ticks" class="ng5-slider-tick" [ngClass]="{'ng5-slider-selected': t.selected}" [ngStyle]="t.style">
    <ng5-slider-tooltip-wrapper [template]="tooltipTemplate" [tooltip]="t.tooltip" [placement]="t.tooltipPlacement"></ng5-slider-tooltip-wrapper>
    <ng5-slider-tooltip-wrapper *ngIf="t.value != null" class="ng5-slider-span ng5-slider-tick-value"
        [template]="tooltipTemplate" [tooltip]="t.valueTooltip" [placement]="t.valueTooltipPlacement" [content]="t.value"></ng5-slider-tooltip-wrapper>
    <span *ngIf="t.legend != null" class="ng5-slider-span ng5-slider-tick-legend">{{ t.legend }}</span>
  </span>
</span>`,
                styles: [`::ng-deep .ng5-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}::ng-deep .ng5-slider.with-legend{margin-bottom:40px}::ng-deep .ng5-slider[disabled]{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}::ng-deep .ng5-slider[disabled] .ng5-slider-draggable{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-selection{background:#8b91a2}::ng-deep .ng5-slider[disabled] .ng5-slider-tick{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-tick.ng5-slider-selected{background:#8b91a2}::ng-deep .ng5-slider .ng5-slider-span{white-space:nowrap;position:absolute;display:inline-block}::ng-deep .ng5-slider .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper{left:0;-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}::ng-deep .ng5-slider .ng5-slider-draggable{cursor:move}::ng-deep .ng5-slider .ng5-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-transparent .ng5-slider-bar{background:0 0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-left-out-selection .ng5-slider-bar{background:#df002d}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-right-out-selection .ng5-slider-bar{background:#03a688}::ng-deep .ng5-slider .ng5-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}::ng-deep .ng5-slider .ng5-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}::ng-deep .ng5-slider .ng5-slider-pointer:hover:after{background-color:#fff}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active{z-index:4}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active:after{background-color:#451aff}::ng-deep .ng5-slider .ng5-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d}::ng-deep .ng5-slider .ng5-slider-bubble.ng5-slider-limit{color:#55637d}::ng-deep .ng5-slider .ng5-slider-ticks{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}::ng-deep .ng5-slider .ng5-slider-ticks-values-under .ng5-slider-tick-value{top:auto;bottom:-36px}::ng-deep .ng5-slider .ng5-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}::ng-deep .ng5-slider .ng5-slider-tick.ng5-slider-selected{background:#0db9f0}::ng-deep .ng5-slider .ng5-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}::ng-deep .ng5-slider .ng5-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}::ng-deep .ng5-slider.ng5-slider-vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-bar{bottom:0;left:auto;width:4px;height:100%}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-pointer{left:-14px!important;top:auto;bottom:0}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-bubble{left:16px!important;margin-left:3px;bottom:0}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}::ng-deep .ng5-slider.ng5-slider-vertical .ng5-slider-ticks-values-under .ng5-slider-tick-value{bottom:auto;left:auto;right:24px}`],
                host: { class: 'ng5-slider' }
            },] },
];
/** @nocollapse */
SliderComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
SliderComponent.propDecorators = {
    "value": [{ type: Input },],
    "valueChange": [{ type: Output },],
    "highValue": [{ type: Input },],
    "highValueChange": [{ type: Output },],
    "userChangeStart": [{ type: Output },],
    "userChange": [{ type: Output },],
    "userChangeEnd": [{ type: Output },],
    "options": [{ type: Input },],
    "manualRefresh": [{ type: Input },],
    "leftOutSelBar": [{ type: ViewChild, args: [LeftOutSelDirective,] },],
    "rightOutSelBar": [{ type: ViewChild, args: [RightOutSelDirective,] },],
    "fullBarElem": [{ type: ViewChild, args: [FullBarDirective,] },],
    "selBarElem": [{ type: ViewChild, args: [SelBarDirective,] },],
    "minHElem": [{ type: ViewChild, args: [MinHDirective,] },],
    "maxHElem": [{ type: ViewChild, args: [MaxHDirective,] },],
    "flrLabElem": [{ type: ViewChild, args: [FlrLabDirective,] },],
    "ceilLabElem": [{ type: ViewChild, args: [CeilLabDirective,] },],
    "minLabElem": [{ type: ViewChild, args: [MinLabDirective,] },],
    "maxLabElem": [{ type: ViewChild, args: [MaxLabDirective,] },],
    "cmbLabElem": [{ type: ViewChild, args: [CmbLabDirective,] },],
    "ticksElem": [{ type: ViewChild, args: [TicksDirective,] },],
    "tooltipTemplate": [{ type: ContentChild, args: ['tooltipTemplate',] },],
    "sliderElementVerticalClass": [{ type: HostBinding, args: ['class.ng5-slider-vertical',] },],
    "sliderElementDisabledAttr": [{ type: HostBinding, args: ['attr.disabled',] },],
    "onResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TooltipWrapperComponent {
}
TooltipWrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng5-slider-tooltip-wrapper',
                template: `<ng-container *ngIf="template">
  <ng-template *ngTemplateOutlet="template; context: {tooltip: tooltip, placement: placement, content: content}"></ng-template>
</ng-container>

<ng-container *ngIf="!template">
  <div class="ng5-slider-inner-tooltip" [attr.title]="tooltip" [attr.data-tooltip-placement]="placement">
    {{content}}
  </div>
</ng-container>`,
                styles: [`.ng5-slider-inner-tooltip{height:100%}`]
            },] },
];
/** @nocollapse */
TooltipWrapperComponent.ctorParameters = () => [];
TooltipWrapperComponent.propDecorators = {
    "template": [{ type: Input },],
    "tooltip": [{ type: Input },],
    "placement": [{ type: Input },],
    "content": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Ng5Slider module
 *
 * The module exports the slider component
 */
class Ng5SliderModule {
}
Ng5SliderModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    SliderComponent,
                    RightOutSelDirective,
                    LeftOutSelDirective,
                    FullBarDirective,
                    SelBarDirective,
                    MinHDirective,
                    MaxHDirective,
                    FlrLabDirective,
                    CeilLabDirective,
                    MinLabDirective,
                    MaxLabDirective,
                    CmbLabDirective,
                    TicksDirective,
                    TooltipWrapperComponent
                ],
                exports: [
                    SliderComponent
                ]
            },] },
];
/** @nocollapse */
Ng5SliderModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { Ng5SliderModule, ChangeContext, PointerType, LabelType, Options, JqLiteWrapper as ɵo, CeilLabDirective as ɵi, CmbLabDirective as ɵl, FlrLabDirective as ɵh, FullBarDirective as ɵd, LeftOutSelDirective as ɵc, MaxHDirective as ɵg, MaxLabDirective as ɵk, MinHDirective as ɵf, MinLabDirective as ɵj, RightOutSelDirective as ɵb, SelBarDirective as ɵe, SliderComponent as ɵn, SliderElement as ɵa, TicksDirective as ɵm, TooltipWrapperComponent as ɵp };
//# sourceMappingURL=ng5-slider.js.map
